{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Workshop Structure: NOMAD Development & Plugins \u00b6 Prerequisites \u00b6 Admin rights: Users must have administrator rights on their computer to install software and change system settings. Software to be installed: Docker Desktop, WSL2, Python, Node.js, Yarn, VSCode Accounts: GitHub account, central NOMAD account (www.nomad-lab.eu) Notes: Check available disk space, memory, and internet connection Introduction \u00b6 Welcome & goals of the workshop Quick participant check (who already uses NOMAD, Git, Docker?) Present prerequisites & confirm everyone is set up Part 1: Setup & Environment \u00b6 Topic: Install NOMAD Distro Dev on Windows Method: Live demo + guided installation by participants Output: Everyone has a running local NOMAD instance Part 2: Developing NOMAD Plugins \u00b6 Topic: Install, activate, and modify NOMAD plugins. Method: Walk through the structure of a plugin, add one to the dev environment, then make and test a small code change using logs, CLI tests, and the GUI. Output: Participants understand plugin anatomy, can install and activate plugins, and are able to implement and validate code changes locally. Part 3: Collaborative Development with Git and GitHub \u00b6 Topic: Working with Git & GitHub Method: Branch \u2192 commit \u2192 push \u2192 pull request \u2192 merge Output: Participants contribute a change to a shared repo Part 4: Writing and Publishing a NOMAD Oasis Image (with Plugins) \u00b6 Topic: Write new NOMAD Oasis image Method: Build Docker image with plugin, run locally, optionally deploy on server Output: Working custom NOMAD Oasis instance with plugin Wrap-Up & Q&A \u00b6 Recap main learning points Common pitfalls & troubleshooting tips Resources (docs, GitHub, community channels) Open floor for participant questions","title":"Overview"},{"location":"index.html#workshop-structure-nomad-development-plugins","text":"","title":"Workshop Structure: NOMAD Development &amp; Plugins"},{"location":"index.html#prerequisites","text":"Admin rights: Users must have administrator rights on their computer to install software and change system settings. Software to be installed: Docker Desktop, WSL2, Python, Node.js, Yarn, VSCode Accounts: GitHub account, central NOMAD account (www.nomad-lab.eu) Notes: Check available disk space, memory, and internet connection","title":"Prerequisites"},{"location":"index.html#introduction","text":"Welcome & goals of the workshop Quick participant check (who already uses NOMAD, Git, Docker?) Present prerequisites & confirm everyone is set up","title":"Introduction"},{"location":"index.html#part-1-setup-environment","text":"Topic: Install NOMAD Distro Dev on Windows Method: Live demo + guided installation by participants Output: Everyone has a running local NOMAD instance","title":"Part 1: Setup &amp; Environment"},{"location":"index.html#part-2-developing-nomad-plugins","text":"Topic: Install, activate, and modify NOMAD plugins. Method: Walk through the structure of a plugin, add one to the dev environment, then make and test a small code change using logs, CLI tests, and the GUI. Output: Participants understand plugin anatomy, can install and activate plugins, and are able to implement and validate code changes locally.","title":"Part 2: Developing NOMAD Plugins"},{"location":"index.html#part-3-collaborative-development-with-git-and-github","text":"Topic: Working with Git & GitHub Method: Branch \u2192 commit \u2192 push \u2192 pull request \u2192 merge Output: Participants contribute a change to a shared repo","title":"Part 3: Collaborative Development with Git and GitHub"},{"location":"index.html#part-4-writing-and-publishing-a-nomad-oasis-image-with-plugins","text":"Topic: Write new NOMAD Oasis image Method: Build Docker image with plugin, run locally, optionally deploy on server Output: Working custom NOMAD Oasis instance with plugin","title":"Part 4: Writing and Publishing a NOMAD Oasis Image (with Plugins)"},{"location":"index.html#wrap-up-qa","text":"Recap main learning points Common pitfalls & troubleshooting tips Resources (docs, GitHub, community channels) Open floor for participant questions","title":"Wrap-Up &amp; Q&amp;A"},{"location":"introduction.html","text":"Introduction \u00b6 Welcome to the NOMAD Development & Plugins Workshop \ud83c\udf89 The goal of this workshop is to: Set up a complete NOMAD development environment on your Windows PC Learn how to install, modify, and test plugins Practice using Git and GitHub to manage changes collaboratively Build and deploy your own NOMAD Oasis image By the end of the workshop, you will: Have a working local NOMAD development setup Understand the plugin structure and how to extend NOMAD Be able to contribute changes via GitHub Know how to package and run your own NOMAD Oasis with custom plugins What we will do and why \u00b6 This workshop will guide you through the full development cycle: System preparation Set up WSL2 and Docker Desktop Install additional software (Python, Node.js, Yarn, uv) NOMAD distro-dev Clone and run the NOMAD development distribution Plugin development Install and activate a plugin Modify the plugin and test changes (via CLI and GUI) Collaboration with GitHub Push changes, open pull requests, merge into main Deployment Build and run a NOMAD Oasis image with your plugin This end-to-end workflow mirrors how real NOMAD development is done in practice. Participant check \u00b6 Before we dive in: Who already has experience with NOMAD, Git, or Docker ? Who has used WSL2 on Windows before? Who has installed VS Code and feels comfortable with the terminal? This helps us adapt the pace of the workshop. Prerequisites \u00b6 Please make sure you have: A NOMAD account ( https://www.nomad-lab.eu A GitHub account (with ability to fork and push to repositories) Software prerequisites (Docker Desktop, WSL2, Git, Python, Node.js, Yarn, uv, VS Code) \ud83d\udc49 We will check in the next section if these tools are installed and working correctly. If something is missing, we will fix it together.","title":"Introduction"},{"location":"introduction.html#introduction","text":"Welcome to the NOMAD Development & Plugins Workshop \ud83c\udf89 The goal of this workshop is to: Set up a complete NOMAD development environment on your Windows PC Learn how to install, modify, and test plugins Practice using Git and GitHub to manage changes collaboratively Build and deploy your own NOMAD Oasis image By the end of the workshop, you will: Have a working local NOMAD development setup Understand the plugin structure and how to extend NOMAD Be able to contribute changes via GitHub Know how to package and run your own NOMAD Oasis with custom plugins","title":"Introduction"},{"location":"introduction.html#what-we-will-do-and-why","text":"This workshop will guide you through the full development cycle: System preparation Set up WSL2 and Docker Desktop Install additional software (Python, Node.js, Yarn, uv) NOMAD distro-dev Clone and run the NOMAD development distribution Plugin development Install and activate a plugin Modify the plugin and test changes (via CLI and GUI) Collaboration with GitHub Push changes, open pull requests, merge into main Deployment Build and run a NOMAD Oasis image with your plugin This end-to-end workflow mirrors how real NOMAD development is done in practice.","title":"What we will do and why"},{"location":"introduction.html#participant-check","text":"Before we dive in: Who already has experience with NOMAD, Git, or Docker ? Who has used WSL2 on Windows before? Who has installed VS Code and feels comfortable with the terminal? This helps us adapt the pace of the workshop.","title":"Participant check"},{"location":"introduction.html#prerequisites","text":"Please make sure you have: A NOMAD account ( https://www.nomad-lab.eu A GitHub account (with ability to fork and push to repositories) Software prerequisites (Docker Desktop, WSL2, Git, Python, Node.js, Yarn, uv, VS Code) \ud83d\udc49 We will check in the next section if these tools are installed and working correctly. If something is missing, we will fix it together.","title":"Prerequisites"},{"location":"nomad-dev-distribution.html","text":"NOMAD Dev Distribution \u00b6 The NOMAD Dev Distribution provides a streamlined way to develop NOMAD and its plugins. Instead of managing multiple environments, everything is set up in one editable workspace, making development and testing much easier. Benefits \u00b6 One-step installation: All packages are installed in editable mode, so code changes take effect immediately. Centralized codebase: Easier navigation across NOMAD and plugins. Better editor support: Improved autocompletion and refactoring. Consistent tooling: Shared linting, testing, and formatting rules. Flexible plugin management: Easily manage different plugin sets via branches. Installation Steps \u00b6 Fork the repository Fork nomad-distro-dev into your own GitHub namespace. Clone your fork git clone https://github.com/<your-username>/nomad-distro-dev.git cd nomad-distro-dev Install required tools Make sure you have installed: Docker (with docker compose ) uv (>= 0.5.14) Node.js (v20) + Yarn (v1.22) Update submodules This pulls in the nomad-lab core package. git submodule update --init --recursive Add local plugins (as submodules) Put your plugins inside the packages/ folder. Example: git submodule add https://github.com/FAIRmat-NFDI/nomad-measurements.git packages/nomad-measurements git submodule add https://github.com/PDI-Berlin/pdi-nomad-plugin.git packages/pdi-nomad-plugin Register plugins with uv Add them to your environment so that changes are picked up: uv add packages/nomad-measurements uv add packages/pdi-nomad-plugin or edit pyproject.toml : [tool.uv.sources] nomad-measurements = { workspace = true } pdi-nomad-plugin = { workspace = true } Set up the environment uv run poe setup This installs dependencies and creates a nomad.yaml config file. Start NOMAD Make sure Docker Desktop is running and the Docker daemon is active. Start the containers: docker compose up -d Then start the backend and frontend locally: uv run poe start # backend uv run poe gui start # frontend NOMAD will open in your browser at http://localhost:3000/nomad-oasis/gui . You will need a central NOMAD login to test properly. Day-to-Day Development \u00b6 Update dependencies: uv sync Run tests for a plugin: uv run --directory packages/pdi-nomad-plugin pytest Lint and format code: uv run poe lint Stop and restart NOMAD: docker compose down docker compose up -d Keeping Your Fork Up to Date \u00b6 Add upstream once: git remote add upstream https://github.com/FAIRmat-NFDI/nomad-distro-dev.git Fetch and merge updates: git fetch upstream git checkout main git merge upstream/main Push back to your fork: git push origin main Common Issues \u00b6 Python package build failures \u2192 Install missing system dependencies (e.g. clang for pycifrw ). Long paths on Windows \u2192 Enable long path support . Phonopy install fails \u2192 uv venv -p 3 .12 uv pip install 'numpy>=1.25' uv pip install 'phonopy==2.11.0' --no-build-isolation \u2705 Summary \u00b6 With nomad-distro-dev , you get a single development environment for NOMAD and its plugins. - Fork \u2192 clone \u2192 add plugins ( nomad-measurements , pdi-nomad-plugin ) \u2192 uv run poe setup \u2192 start NOMAD with Docker running. - Plugins are editable immediately. - Updates and testing are straightforward.","title":"Nomad dev distribution"},{"location":"nomad-dev-distribution.html#nomad-dev-distribution","text":"The NOMAD Dev Distribution provides a streamlined way to develop NOMAD and its plugins. Instead of managing multiple environments, everything is set up in one editable workspace, making development and testing much easier.","title":"NOMAD Dev Distribution"},{"location":"nomad-dev-distribution.html#benefits","text":"One-step installation: All packages are installed in editable mode, so code changes take effect immediately. Centralized codebase: Easier navigation across NOMAD and plugins. Better editor support: Improved autocompletion and refactoring. Consistent tooling: Shared linting, testing, and formatting rules. Flexible plugin management: Easily manage different plugin sets via branches.","title":"Benefits"},{"location":"nomad-dev-distribution.html#installation-steps","text":"Fork the repository Fork nomad-distro-dev into your own GitHub namespace. Clone your fork git clone https://github.com/<your-username>/nomad-distro-dev.git cd nomad-distro-dev Install required tools Make sure you have installed: Docker (with docker compose ) uv (>= 0.5.14) Node.js (v20) + Yarn (v1.22) Update submodules This pulls in the nomad-lab core package. git submodule update --init --recursive Add local plugins (as submodules) Put your plugins inside the packages/ folder. Example: git submodule add https://github.com/FAIRmat-NFDI/nomad-measurements.git packages/nomad-measurements git submodule add https://github.com/PDI-Berlin/pdi-nomad-plugin.git packages/pdi-nomad-plugin Register plugins with uv Add them to your environment so that changes are picked up: uv add packages/nomad-measurements uv add packages/pdi-nomad-plugin or edit pyproject.toml : [tool.uv.sources] nomad-measurements = { workspace = true } pdi-nomad-plugin = { workspace = true } Set up the environment uv run poe setup This installs dependencies and creates a nomad.yaml config file. Start NOMAD Make sure Docker Desktop is running and the Docker daemon is active. Start the containers: docker compose up -d Then start the backend and frontend locally: uv run poe start # backend uv run poe gui start # frontend NOMAD will open in your browser at http://localhost:3000/nomad-oasis/gui . You will need a central NOMAD login to test properly.","title":"Installation Steps"},{"location":"nomad-dev-distribution.html#day-to-day-development","text":"Update dependencies: uv sync Run tests for a plugin: uv run --directory packages/pdi-nomad-plugin pytest Lint and format code: uv run poe lint Stop and restart NOMAD: docker compose down docker compose up -d","title":"Day-to-Day Development"},{"location":"nomad-dev-distribution.html#keeping-your-fork-up-to-date","text":"Add upstream once: git remote add upstream https://github.com/FAIRmat-NFDI/nomad-distro-dev.git Fetch and merge updates: git fetch upstream git checkout main git merge upstream/main Push back to your fork: git push origin main","title":"Keeping Your Fork Up to Date"},{"location":"nomad-dev-distribution.html#common-issues","text":"Python package build failures \u2192 Install missing system dependencies (e.g. clang for pycifrw ). Long paths on Windows \u2192 Enable long path support . Phonopy install fails \u2192 uv venv -p 3 .12 uv pip install 'numpy>=1.25' uv pip install 'phonopy==2.11.0' --no-build-isolation","title":"Common Issues"},{"location":"nomad-dev-distribution.html#summary","text":"With nomad-distro-dev , you get a single development environment for NOMAD and its plugins. - Fork \u2192 clone \u2192 add plugins ( nomad-measurements , pdi-nomad-plugin ) \u2192 uv run poe setup \u2192 start NOMAD with Docker running. - Plugins are editable immediately. - Updates and testing are straightforward.","title":"\u2705 Summary"},{"location":"part-1-setup-environment.html","text":"Part 1: Setup & Environment \u00b6 Installation Paths \u00b6 There are two ways to set up NOMAD development on Windows: Path A (recommended): Use WSL2 (Windows Subsystem for Linux) with Ubuntu \u2192 Provides a Linux environment close to production, fewer path and dependency issues. Could be more stable since most NOMAD developer run and test their developments in Linux. Path B (alternative): Install and run everything directly in Windows \u2192 Simpler if IT restrictions make WSL/Docker integration difficult, but can run into Windows-specific issues. Checking Software Requirements \u00b6 Before we start with NOMAD distro-dev, let\u2019s verify that all required tools are installed and working. Run the following checks in Windows Terminal (use PowerShell and/or Ubuntu (WSL) tabs depending on your chosen path). Type wsl in PoweShell to start WSL2. 1) Check WSL \u00b6 PowerShell: wsl --status \u2705 Installed \u2192 shows version info (should include WSL version: 2 ) \u274c Not installed \u2192 IT must install WSL (admin rights) PowerShell (list distros): wsl --list --verbose \u2705 Ubuntu (or another distro) listed \u274c Missing \u2192 install with: wsl --install -d Ubuntu 2) Check Docker Desktop \u00b6 PowerShell: docker -- version docker run hello - world \u2705 Prints Docker version and shows \u201cHello from Docker!\u201d \u274c Error \u2192 Docker Desktop not installed or not running If you use Path A (WSL), also check inside Ubuntu: docker --version docker run hello-world \u274c If daemon not reachable \u2192 enable Ubuntu under Docker Desktop \u2192 Settings \u2192 Resources \u2192 WSL integration , then retry 3) Check Git \u00b6 Ubuntu (Path A): git --version Windows (Path B): git --version \u2705 Returns a version (e.g., git version 2.x ) 4) Check Python \u00b6 Ubuntu (Path A): python3 --version Windows (Path B): python --version \u2705 Returns 3.x.x \u26a0\ufe0f On Windows, ensure Long Paths are enabled if you\u2019ll install lots of Python deps 5) Check Node.js & npm \u00b6 Ubuntu or Windows (your path): node -v npm -v * \u2705 Both return versions (e.g., v20.x , 10.x ) 6) Check Yarn \u00b6 yarn --version \u2705 Returns a version (e.g., 1.22.x or 4.x ) 7) Check uv \u00b6 uv --version \u2705 Returns a version 8) Check VS Code Integration \u00b6 Ubuntu (Path A): code . \u2705 VS Code opens with green status bar: WSL: Ubuntu \u274c If code not found \u2192 in VS Code (Windows) run Shell Command: Install 'code' command in PATH from the Command Palette, then retry Windows (Path B): code . \u2705 VS Code opens in the current folder If all checks pass, your system is ready for NOMAD distro-dev . If something fails, we\u2019ll fix it before moving on. System Check: Quick Checklist \u00b6 Done Tool Command Expected Output \u2610 WSL wsl --status Shows version info, includes WSL version: 2 \u2610 wsl --list --verbose Ubuntu (or another distro) listed \u2610 Docker docker --version Docker version (e.g., Docker version 27\u2026 ) \u2610 docker run hello-world Message \u201cHello from Docker!\u201d \u2610 Git git --version Version string (e.g., git version 2.43.0 ) \u2610 Python python3 --version (Ubuntu) 3.x.x \u2610 python --version (Windows) 3.x.x (ensure Long Paths enabled in Windows) \u2610 Node.js node -v Node version (e.g., v20.11.1 ) \u2610 npm npm -v npm version (e.g., 10.5.2 ) \u2610 Yarn yarn --version Yarn version (e.g., 1.22.19 or 4.x ) \u2610 uv uv --version uv version \u2610 VS Code code . VS Code opens (WSL mode shows WSL: Ubuntu ) Installation Guide \u00b6 This guide lists the tools required for NOMAD development on Windows in the recommended order of installation : WSL2 Docker Desktop Other developer tools (Git, Python, uv, Node.js, Yarn, VS Code) 1) Install WSL2 \u00b6 WSL2 (Windows Subsystem for Linux) provides a Linux environment on Windows. 1.1 Enable WSL (run as Administrator) \u00b6 wsl - -install Installs WSL and the default Linux distribution (Ubuntu). To explicitly install Ubuntu: wsl - -install -d Ubuntu If WSL is already installed, ensure you\u2019re on WSL 2: wsl - -set-default-version 2 wsl - -update 1.2 Verify WSL installation \u00b6 wsl - -status wsl - -list - -verbose Expect WSL version: 2 Ubuntu should be listed 1.3 Launch Ubuntu \u00b6 Open Windows Terminal \u2192 Ubuntu (first launch prompts you to create a Linux username/password). 2) Install Docker Desktop \u00b6 Docker is required to run NOMAD and build images. 2.1 Download & install (requires Administrator) \u00b6 Download: Docker Desktop for Windows During setup, enable \u201cUse WSL 2 instead of Hyper-V\u201d Restart when prompted 2.2 Verify Docker (Windows side) \u00b6 docker - -version docker run hello-world 2.3 Verify Docker (Ubuntu/WSL side) \u00b6 docker --version docker run hello-world 2.4 Ensure WSL integration is enabled \u00b6 Open Docker Desktop \u2192 Settings \u2192 Resources \u2192 WSL Integration and enable Ubuntu . If docker run hello-world fails inside Ubuntu with a daemon error, enable WSL integration for Ubuntu, then retry. 3) Install Other Developer Tools \u00b6 3.1 Git \u00b6 Ubuntu (Path A \u2013 recommended): sudo apt update sudo apt install -y git git --version Windows (Path B \u2013 alternative): Download: Git for Windows Choose \u201cInstall for me only\u201d if you want to avoid admin rights Verify: git - -version 3.2 Python \u00b6 Ubuntu (Path A): sudo apt install -y python3 python3-pip python3-venv python3 --version Windows (Path B): Download: Python for Windows Check Add python.exe to PATH Check Enable long path support (or enable later as below) Choose \u201cInstall for me only\u201d to avoid admin rights Verify: python - -version Windows long path fix (important for deep dependency trees): Group Policy (admin): Computer Configuration \u2192 Administrative Templates \u2192 System \u2192 Filesystem \u2192 Enable Win32 long paths = Enabled Registry (admin): reg add HKLM \\ SYSTEM \\ CurrentControlSet \\ Control \\ FileSystem ` / v LongPathsEnabled / t REG_DWORD / d 1 / f 3.3 uv (fast Python package manager) \u00b6 Ubuntu (Path A): curl -LsSf https://astral.sh/uv/install.sh | sh source ~/.bashrc uv --version Windows (Path B): powershell -ExecutionPolicy ByPass -c \"irm https://astral.sh/uv/install.ps1 | iex\" uv - -version 3.4 Node.js & npm \u00b6 Ubuntu (Path A) \u2013 via nvm (no root needed): curl -fsSL https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash source ~/.bashrc nvm install --lts node -v npm -v Windows (Path B) \u2013 ZIP (no admin): Download Windows x64 ZIP from Node.js downloads Extract to: C:\\Users\\<YourUsername>\\nodejs Add this folder to User PATH (Environment Variables \u2192 User \u2192 Path \u2192 Add) Verify: node -v npm -v 3.5 Yarn \u00b6 Ubuntu (Path A): corepack enable corepack prepare yarn@stable --activate yarn --version Windows (Path B): Option A (admin): install via MSI \u2192 Yarn Option B (no admin, recommended): via Corepack corepack enable corepack prepare yarn @stable - -activate yarn - -version 3.6 Visual Studio Code \u00b6 Install (User Installer; no admin required): Download: Visual Studio Code Extensions: Remote \u2013 WSL (for Path A) Docker Python JavaScript/TypeScript Verify code command: Ubuntu (Path A): code . Should open VS Code with \u201cWSL: Ubuntu\u201d in the status bar Windows (Path B): code . Should open VS Code in the current folder If code is not found: In VS Code (Windows): Command Palette \u2192 \u201cShell Command: Install 'code' command in PATH\u201d , then reopen the terminal. 4) Optional: Quick PATH Verification (sanity check) \u00b6 Ubuntu (Path A): which git which python3 which node which npm which yarn which uv Windows (Path B): where git where python where node where npm where yarn where uv All commands should resolve to valid paths (user or system locations), and the corresponding --version checks should print versions. \u2705 Ready for NOMAD distro-dev \u00b6 At this point, your system has WSL2, Docker Desktop, and all required developer tools installed and verified. Continue with the NOMAD distro-dev setup using the official repository documentation. NOMAD Dev Distribution \u00b6 The NOMAD Dev Distribution provides a streamlined way to develop NOMAD and its plugins. Instead of managing multiple environments, everything is set up in one editable workspace, making development and testing much easier. Benefits \u00b6 One-step installation: All packages are installed in editable mode, so code changes take effect immediately. Centralized codebase: Easier navigation across NOMAD and plugins. Better editor support: Improved autocompletion and refactoring. Consistent tooling: Shared linting, testing, and formatting rules. Flexible plugin management: Easily manage different plugin sets via branches. Installation Steps \u00b6 Fork the repository Fork nomad-distro-dev into your own GitHub namespace. Clone your fork git clone https://github.com/<your-username>/nomad-distro-dev.git cd nomad-distro-dev Install required tools Make sure you have installed: Docker (with docker compose ) uv (>= 0.5.14) Node.js (v20) + Yarn (v1.22) Update submodules This pulls in the nomad-lab core package. git submodule update --init --recursive Add local plugins (as submodules) Put your plugins inside the packages/ folder. Example: git submodule add https://github.com/FAIRmat-NFDI/nomad-measurements.git packages/nomad-measurements git submodule add https://github.com/PDI-Berlin/pdi-nomad-plugin.git packages/pdi-nomad-plugin Register plugins with uv Add them to your environment so that changes are picked up: uv add packages/nomad-measurements uv add packages/pdi-nomad-plugin or edit pyproject.toml : [tool.uv.sources] nomad-measurements = { workspace = true } pdi-nomad-plugin = { workspace = true } Set up the environment uv run poe setup This installs dependencies and creates a nomad.yaml config file. Start NOMAD Make sure Docker Desktop is running and the Docker daemon is active. Start the containers: docker compose up -d Then start the backend and frontend locally: uv run poe start # backend uv run poe gui start # frontend NOMAD will open in your browser at http://localhost:3000/nomad-oasis/gui . You will need a central NOMAD login to test properly. Day-to-Day Development \u00b6 Update dependencies: uv sync Run tests for a plugin: uv run --directory packages/pdi-nomad-plugin pytest Lint and format code: uv run poe lint Stop and restart NOMAD: docker compose down docker compose up -d Keeping Your Fork Up to Date \u00b6 Add upstream once: git remote add upstream https://github.com/FAIRmat-NFDI/nomad-distro-dev.git Fetch and merge updates: git fetch upstream git checkout main git merge upstream/main Push back to your fork: git push origin main Common Issues \u00b6 Python package build failures \u2192 Install missing system dependencies (e.g. clang for pycifrw ). Long paths on Windows \u2192 Enable long path support . Phonopy install fails \u2192 uv venv -p 3 .12 uv pip install 'numpy>=1.25' uv pip install 'phonopy==2.11.0' --no-build-isolation \u2705 Summary \u00b6 With nomad-distro-dev , you get a single development environment for NOMAD and its plugins. Fork \u2192 clone \u2192 add plugins ( nomad-measurements , pdi-nomad-plugin ) \u2192 uv run poe setup \u2192 start NOMAD with Docker running. Plugins are editable immediately. Updates and testing are straightforward.","title":"Part 1"},{"location":"part-1-setup-environment.html#part-1-setup-environment","text":"","title":"Part 1: Setup &amp; Environment"},{"location":"part-1-setup-environment.html#installation-paths","text":"There are two ways to set up NOMAD development on Windows: Path A (recommended): Use WSL2 (Windows Subsystem for Linux) with Ubuntu \u2192 Provides a Linux environment close to production, fewer path and dependency issues. Could be more stable since most NOMAD developer run and test their developments in Linux. Path B (alternative): Install and run everything directly in Windows \u2192 Simpler if IT restrictions make WSL/Docker integration difficult, but can run into Windows-specific issues.","title":"Installation Paths"},{"location":"part-1-setup-environment.html#checking-software-requirements","text":"Before we start with NOMAD distro-dev, let\u2019s verify that all required tools are installed and working. Run the following checks in Windows Terminal (use PowerShell and/or Ubuntu (WSL) tabs depending on your chosen path). Type wsl in PoweShell to start WSL2.","title":"Checking Software Requirements"},{"location":"part-1-setup-environment.html#1-check-wsl","text":"PowerShell: wsl --status \u2705 Installed \u2192 shows version info (should include WSL version: 2 ) \u274c Not installed \u2192 IT must install WSL (admin rights) PowerShell (list distros): wsl --list --verbose \u2705 Ubuntu (or another distro) listed \u274c Missing \u2192 install with: wsl --install -d Ubuntu","title":"1) Check WSL"},{"location":"part-1-setup-environment.html#2-check-docker-desktop","text":"PowerShell: docker -- version docker run hello - world \u2705 Prints Docker version and shows \u201cHello from Docker!\u201d \u274c Error \u2192 Docker Desktop not installed or not running If you use Path A (WSL), also check inside Ubuntu: docker --version docker run hello-world \u274c If daemon not reachable \u2192 enable Ubuntu under Docker Desktop \u2192 Settings \u2192 Resources \u2192 WSL integration , then retry","title":"2) Check Docker Desktop"},{"location":"part-1-setup-environment.html#3-check-git","text":"Ubuntu (Path A): git --version Windows (Path B): git --version \u2705 Returns a version (e.g., git version 2.x )","title":"3) Check Git"},{"location":"part-1-setup-environment.html#4-check-python","text":"Ubuntu (Path A): python3 --version Windows (Path B): python --version \u2705 Returns 3.x.x \u26a0\ufe0f On Windows, ensure Long Paths are enabled if you\u2019ll install lots of Python deps","title":"4) Check Python"},{"location":"part-1-setup-environment.html#5-check-nodejs-npm","text":"Ubuntu or Windows (your path): node -v npm -v * \u2705 Both return versions (e.g., v20.x , 10.x )","title":"5) Check Node.js &amp; npm"},{"location":"part-1-setup-environment.html#6-check-yarn","text":"yarn --version \u2705 Returns a version (e.g., 1.22.x or 4.x )","title":"6) Check Yarn"},{"location":"part-1-setup-environment.html#7-check-uv","text":"uv --version \u2705 Returns a version","title":"7) Check uv"},{"location":"part-1-setup-environment.html#8-check-vs-code-integration","text":"Ubuntu (Path A): code . \u2705 VS Code opens with green status bar: WSL: Ubuntu \u274c If code not found \u2192 in VS Code (Windows) run Shell Command: Install 'code' command in PATH from the Command Palette, then retry Windows (Path B): code . \u2705 VS Code opens in the current folder If all checks pass, your system is ready for NOMAD distro-dev . If something fails, we\u2019ll fix it before moving on.","title":"8) Check VS Code Integration"},{"location":"part-1-setup-environment.html#system-check-quick-checklist","text":"Done Tool Command Expected Output \u2610 WSL wsl --status Shows version info, includes WSL version: 2 \u2610 wsl --list --verbose Ubuntu (or another distro) listed \u2610 Docker docker --version Docker version (e.g., Docker version 27\u2026 ) \u2610 docker run hello-world Message \u201cHello from Docker!\u201d \u2610 Git git --version Version string (e.g., git version 2.43.0 ) \u2610 Python python3 --version (Ubuntu) 3.x.x \u2610 python --version (Windows) 3.x.x (ensure Long Paths enabled in Windows) \u2610 Node.js node -v Node version (e.g., v20.11.1 ) \u2610 npm npm -v npm version (e.g., 10.5.2 ) \u2610 Yarn yarn --version Yarn version (e.g., 1.22.19 or 4.x ) \u2610 uv uv --version uv version \u2610 VS Code code . VS Code opens (WSL mode shows WSL: Ubuntu )","title":"System Check: Quick Checklist"},{"location":"part-1-setup-environment.html#installation-guide","text":"This guide lists the tools required for NOMAD development on Windows in the recommended order of installation : WSL2 Docker Desktop Other developer tools (Git, Python, uv, Node.js, Yarn, VS Code)","title":"Installation Guide"},{"location":"part-1-setup-environment.html#1-install-wsl2","text":"WSL2 (Windows Subsystem for Linux) provides a Linux environment on Windows.","title":"1) Install WSL2"},{"location":"part-1-setup-environment.html#11-enable-wsl-run-as-administrator","text":"wsl - -install Installs WSL and the default Linux distribution (Ubuntu). To explicitly install Ubuntu: wsl - -install -d Ubuntu If WSL is already installed, ensure you\u2019re on WSL 2: wsl - -set-default-version 2 wsl - -update","title":"1.1 Enable WSL (run as Administrator)"},{"location":"part-1-setup-environment.html#12-verify-wsl-installation","text":"wsl - -status wsl - -list - -verbose Expect WSL version: 2 Ubuntu should be listed","title":"1.2 Verify WSL installation"},{"location":"part-1-setup-environment.html#13-launch-ubuntu","text":"Open Windows Terminal \u2192 Ubuntu (first launch prompts you to create a Linux username/password).","title":"1.3 Launch Ubuntu"},{"location":"part-1-setup-environment.html#2-install-docker-desktop","text":"Docker is required to run NOMAD and build images.","title":"2) Install Docker Desktop"},{"location":"part-1-setup-environment.html#21-download-install-requires-administrator","text":"Download: Docker Desktop for Windows During setup, enable \u201cUse WSL 2 instead of Hyper-V\u201d Restart when prompted","title":"2.1 Download &amp; install (requires Administrator)"},{"location":"part-1-setup-environment.html#22-verify-docker-windows-side","text":"docker - -version docker run hello-world","title":"2.2 Verify Docker (Windows side)"},{"location":"part-1-setup-environment.html#23-verify-docker-ubuntuwsl-side","text":"docker --version docker run hello-world","title":"2.3 Verify Docker (Ubuntu/WSL side)"},{"location":"part-1-setup-environment.html#24-ensure-wsl-integration-is-enabled","text":"Open Docker Desktop \u2192 Settings \u2192 Resources \u2192 WSL Integration and enable Ubuntu . If docker run hello-world fails inside Ubuntu with a daemon error, enable WSL integration for Ubuntu, then retry.","title":"2.4 Ensure WSL integration is enabled"},{"location":"part-1-setup-environment.html#3-install-other-developer-tools","text":"","title":"3) Install Other Developer Tools"},{"location":"part-1-setup-environment.html#31-git","text":"Ubuntu (Path A \u2013 recommended): sudo apt update sudo apt install -y git git --version Windows (Path B \u2013 alternative): Download: Git for Windows Choose \u201cInstall for me only\u201d if you want to avoid admin rights Verify: git - -version","title":"3.1 Git"},{"location":"part-1-setup-environment.html#32-python","text":"Ubuntu (Path A): sudo apt install -y python3 python3-pip python3-venv python3 --version Windows (Path B): Download: Python for Windows Check Add python.exe to PATH Check Enable long path support (or enable later as below) Choose \u201cInstall for me only\u201d to avoid admin rights Verify: python - -version Windows long path fix (important for deep dependency trees): Group Policy (admin): Computer Configuration \u2192 Administrative Templates \u2192 System \u2192 Filesystem \u2192 Enable Win32 long paths = Enabled Registry (admin): reg add HKLM \\ SYSTEM \\ CurrentControlSet \\ Control \\ FileSystem ` / v LongPathsEnabled / t REG_DWORD / d 1 / f","title":"3.2 Python"},{"location":"part-1-setup-environment.html#33-uv-fast-python-package-manager","text":"Ubuntu (Path A): curl -LsSf https://astral.sh/uv/install.sh | sh source ~/.bashrc uv --version Windows (Path B): powershell -ExecutionPolicy ByPass -c \"irm https://astral.sh/uv/install.ps1 | iex\" uv - -version","title":"3.3 uv (fast Python package manager)"},{"location":"part-1-setup-environment.html#34-nodejs-npm","text":"Ubuntu (Path A) \u2013 via nvm (no root needed): curl -fsSL https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash source ~/.bashrc nvm install --lts node -v npm -v Windows (Path B) \u2013 ZIP (no admin): Download Windows x64 ZIP from Node.js downloads Extract to: C:\\Users\\<YourUsername>\\nodejs Add this folder to User PATH (Environment Variables \u2192 User \u2192 Path \u2192 Add) Verify: node -v npm -v","title":"3.4 Node.js &amp; npm"},{"location":"part-1-setup-environment.html#35-yarn","text":"Ubuntu (Path A): corepack enable corepack prepare yarn@stable --activate yarn --version Windows (Path B): Option A (admin): install via MSI \u2192 Yarn Option B (no admin, recommended): via Corepack corepack enable corepack prepare yarn @stable - -activate yarn - -version","title":"3.5 Yarn"},{"location":"part-1-setup-environment.html#36-visual-studio-code","text":"Install (User Installer; no admin required): Download: Visual Studio Code Extensions: Remote \u2013 WSL (for Path A) Docker Python JavaScript/TypeScript Verify code command: Ubuntu (Path A): code . Should open VS Code with \u201cWSL: Ubuntu\u201d in the status bar Windows (Path B): code . Should open VS Code in the current folder If code is not found: In VS Code (Windows): Command Palette \u2192 \u201cShell Command: Install 'code' command in PATH\u201d , then reopen the terminal.","title":"3.6 Visual Studio Code"},{"location":"part-1-setup-environment.html#4-optional-quick-path-verification-sanity-check","text":"Ubuntu (Path A): which git which python3 which node which npm which yarn which uv Windows (Path B): where git where python where node where npm where yarn where uv All commands should resolve to valid paths (user or system locations), and the corresponding --version checks should print versions.","title":"4) Optional: Quick PATH Verification (sanity check)"},{"location":"part-1-setup-environment.html#ready-for-nomad-distro-dev","text":"At this point, your system has WSL2, Docker Desktop, and all required developer tools installed and verified. Continue with the NOMAD distro-dev setup using the official repository documentation.","title":"\u2705 Ready for NOMAD distro-dev"},{"location":"part-1-setup-environment.html#nomad-dev-distribution","text":"The NOMAD Dev Distribution provides a streamlined way to develop NOMAD and its plugins. Instead of managing multiple environments, everything is set up in one editable workspace, making development and testing much easier.","title":"NOMAD Dev Distribution"},{"location":"part-1-setup-environment.html#benefits","text":"One-step installation: All packages are installed in editable mode, so code changes take effect immediately. Centralized codebase: Easier navigation across NOMAD and plugins. Better editor support: Improved autocompletion and refactoring. Consistent tooling: Shared linting, testing, and formatting rules. Flexible plugin management: Easily manage different plugin sets via branches.","title":"Benefits"},{"location":"part-1-setup-environment.html#installation-steps","text":"Fork the repository Fork nomad-distro-dev into your own GitHub namespace. Clone your fork git clone https://github.com/<your-username>/nomad-distro-dev.git cd nomad-distro-dev Install required tools Make sure you have installed: Docker (with docker compose ) uv (>= 0.5.14) Node.js (v20) + Yarn (v1.22) Update submodules This pulls in the nomad-lab core package. git submodule update --init --recursive Add local plugins (as submodules) Put your plugins inside the packages/ folder. Example: git submodule add https://github.com/FAIRmat-NFDI/nomad-measurements.git packages/nomad-measurements git submodule add https://github.com/PDI-Berlin/pdi-nomad-plugin.git packages/pdi-nomad-plugin Register plugins with uv Add them to your environment so that changes are picked up: uv add packages/nomad-measurements uv add packages/pdi-nomad-plugin or edit pyproject.toml : [tool.uv.sources] nomad-measurements = { workspace = true } pdi-nomad-plugin = { workspace = true } Set up the environment uv run poe setup This installs dependencies and creates a nomad.yaml config file. Start NOMAD Make sure Docker Desktop is running and the Docker daemon is active. Start the containers: docker compose up -d Then start the backend and frontend locally: uv run poe start # backend uv run poe gui start # frontend NOMAD will open in your browser at http://localhost:3000/nomad-oasis/gui . You will need a central NOMAD login to test properly.","title":"Installation Steps"},{"location":"part-1-setup-environment.html#day-to-day-development","text":"Update dependencies: uv sync Run tests for a plugin: uv run --directory packages/pdi-nomad-plugin pytest Lint and format code: uv run poe lint Stop and restart NOMAD: docker compose down docker compose up -d","title":"Day-to-Day Development"},{"location":"part-1-setup-environment.html#keeping-your-fork-up-to-date","text":"Add upstream once: git remote add upstream https://github.com/FAIRmat-NFDI/nomad-distro-dev.git Fetch and merge updates: git fetch upstream git checkout main git merge upstream/main Push back to your fork: git push origin main","title":"Keeping Your Fork Up to Date"},{"location":"part-1-setup-environment.html#common-issues","text":"Python package build failures \u2192 Install missing system dependencies (e.g. clang for pycifrw ). Long paths on Windows \u2192 Enable long path support . Phonopy install fails \u2192 uv venv -p 3 .12 uv pip install 'numpy>=1.25' uv pip install 'phonopy==2.11.0' --no-build-isolation","title":"Common Issues"},{"location":"part-1-setup-environment.html#summary","text":"With nomad-distro-dev , you get a single development environment for NOMAD and its plugins. Fork \u2192 clone \u2192 add plugins ( nomad-measurements , pdi-nomad-plugin ) \u2192 uv run poe setup \u2192 start NOMAD with Docker running. Plugins are editable immediately. Updates and testing are straightforward.","title":"\u2705 Summary"},{"location":"part-2-developing-plugins.html","text":"Part 2: Developing NOMAD plugins \u00b6 Modifying an existing plugin \u00b6 Follow the steps above about adding a plugin to your local NOMAD Development Distribution. You can open the files you want to modify in packages/<path_to_your_plugin Let's open packages/pdi-nomad-plugin/src/pdi_nomad_plugin/mbe/processes.py and modify it. Go to the ExperimentMbePDI class and let's add an additional quantity in the root section of this class just before the normalizer function def normalize : my_quantity = Quantity ( type = str , description = 'Just testing to modify a plugin' , a_eln = ELNAnnotation ( component = 'StringEditQuantity' , ), ) Now we have to restart the NOMAD app worker in case it is running already. Therefore press CTRL + C in the terminal window where this process is running. Start the NOMAD app again by running uv run poe start . In case the GUI is stopped start it by uv run poe gui start . To make sure you can see the changes in the GUI type CTRL + SHIFT + R to hard reload the current page. Otherwise you might load a cached version which does not show your changes. Testing plugins in the terminal \u00b6 Checking the modified plugin in the GUI can be time consuming. You can also run the nomad parse command in a terminak on test files and test if it gets processed. Let's try out a simple example. Create a new file in packages/pdi-nomad-plugin/tests/data/mbe/ and name it test1.archive.json . Paste the following content { \"data\" : { \"m_def\" : \"pdi_nomad_plugin.mbe.processes.ExperimentMbePDI\" , \"name\" : \"test1\" , \"datetime\" : \"2025-09-24T17:05:08.083081+00:00\" , \"substrate_holder\" : {}, \"my_quantity\" : \"this is a test\" }, \"workflow2\" : { \"name\" : \"test1\" } } and save it. You can now run and test you plugin by doing: uv run nomad parse packages/pdi-nomad-plugin/tests/data/mbe/test1.archive.json --show-archive This will output the processed NOMAD archive. You can also store the output by using: uv run nomad parse packages/pdi-nomad-plugin/tests/data/mbe/test1.archive.json --show-archive > testoutput.archive.json This is more useful when you work on parsing files and want to test some processing where spinning up the appworker and testing inthe GUI for each little change would be too time consuming. If you have the nomad-measurment plugin installed you can run the nomad-parse command for example on a XRD file: uv run nomad parse packages/nomad-measurements/tests/data/xrd/TwoTheta_scan_powder.rasx This will create a NOMAD archive file named TwoTheta_scan_powder..archive.json We need to run nomad parse again on this archive file and store the output in a new archive.json file to access the processed output: uv run nomad parse packages/nomad-measurements/tests/data/xrd/TwoTheta_scan_powder.archive.json > test1.archive.json You can also test the plots of the plugin by using --preview-plots . This is extremely useful to quickly change plots. Run and see the Plotly plots in corresponding browser tabs: uv run nomad parse packages/nomad-measurements/tests/data/xrd/TwoTheta_scan_powder.archive.json --preview-plots Please refer to plugins documentation to learn more about running parsers from CLI or within Python. Running the parse command within Python can be used to run automatized tests. Debugging Plugin Code \u00b6 Debugging is the process of running your code step by step in order to find problems and understand how it behaves at runtime. Instead of just looking at log files or error messages, a debugger lets you pause execution , inspect variables , and control the flow of your program . This is one of the most effective ways to fix issues in your plugin code and learn how NOMAD processes your changes. Running NOMAD locally with a debugger allows you to attach directly to the plugin code while it executes. You can then pause execution at specific lines (breakpoints), check variable values, and follow the program\u2019s logic in detail. Step 1: Enable the Debugger \u00b6 Open the file .vscode/launch.json in your nomad-distro-dev workspace and add the following configuration: { \"name\" : \"appworker\" , \"type\" : \"python\" , \"request\" : \"launch\" , \"justMyCode\" : false , \"program\" : \"${workspaceFolder}/.venv/bin/nomad\" , \"args\" : [ \"admin\" , \"run\" , \"appworker\" ] } Save the file. Step 2: Set Breakpoints \u00b6 Open the plugin file you want to inspect in VS Code. Click in the margin (to the left of the line number) where you want execution to pause. A red dot will appear, marking your breakpoint. Step 3: Run NOMAD in Debug Mode \u00b6 In VS Code, open the Run and Debug panel (left sidebar). Select appworker from the dropdown menu. Press the Play button \u25b6\ufe0f. NOMAD will now start in debugging mode. Step 4: Trigger Your Plugin Code \u00b6 Open the NOMAD GUI in your browser. Perform the action that uses your plugin (e.g., upload a file, run a calculation, etc.). Execution will stop at your breakpoint. At this point, you can: Inspect variable values Step through code line by line Resume execution with the control buttons \u2705 Summary \u00b6 Breakpoints stop execution where you want to inspect code Debugger shows variable values and program flow Run/Debug mode in VS Code makes it easy to understand what your plugin is doing and fix errors more effectively","title":"Part 2"},{"location":"part-2-developing-plugins.html#part-2-developing-nomad-plugins","text":"","title":"Part 2: Developing NOMAD plugins"},{"location":"part-2-developing-plugins.html#modifying-an-existing-plugin","text":"Follow the steps above about adding a plugin to your local NOMAD Development Distribution. You can open the files you want to modify in packages/<path_to_your_plugin Let's open packages/pdi-nomad-plugin/src/pdi_nomad_plugin/mbe/processes.py and modify it. Go to the ExperimentMbePDI class and let's add an additional quantity in the root section of this class just before the normalizer function def normalize : my_quantity = Quantity ( type = str , description = 'Just testing to modify a plugin' , a_eln = ELNAnnotation ( component = 'StringEditQuantity' , ), ) Now we have to restart the NOMAD app worker in case it is running already. Therefore press CTRL + C in the terminal window where this process is running. Start the NOMAD app again by running uv run poe start . In case the GUI is stopped start it by uv run poe gui start . To make sure you can see the changes in the GUI type CTRL + SHIFT + R to hard reload the current page. Otherwise you might load a cached version which does not show your changes.","title":"Modifying an existing plugin"},{"location":"part-2-developing-plugins.html#testing-plugins-in-the-terminal","text":"Checking the modified plugin in the GUI can be time consuming. You can also run the nomad parse command in a terminak on test files and test if it gets processed. Let's try out a simple example. Create a new file in packages/pdi-nomad-plugin/tests/data/mbe/ and name it test1.archive.json . Paste the following content { \"data\" : { \"m_def\" : \"pdi_nomad_plugin.mbe.processes.ExperimentMbePDI\" , \"name\" : \"test1\" , \"datetime\" : \"2025-09-24T17:05:08.083081+00:00\" , \"substrate_holder\" : {}, \"my_quantity\" : \"this is a test\" }, \"workflow2\" : { \"name\" : \"test1\" } } and save it. You can now run and test you plugin by doing: uv run nomad parse packages/pdi-nomad-plugin/tests/data/mbe/test1.archive.json --show-archive This will output the processed NOMAD archive. You can also store the output by using: uv run nomad parse packages/pdi-nomad-plugin/tests/data/mbe/test1.archive.json --show-archive > testoutput.archive.json This is more useful when you work on parsing files and want to test some processing where spinning up the appworker and testing inthe GUI for each little change would be too time consuming. If you have the nomad-measurment plugin installed you can run the nomad-parse command for example on a XRD file: uv run nomad parse packages/nomad-measurements/tests/data/xrd/TwoTheta_scan_powder.rasx This will create a NOMAD archive file named TwoTheta_scan_powder..archive.json We need to run nomad parse again on this archive file and store the output in a new archive.json file to access the processed output: uv run nomad parse packages/nomad-measurements/tests/data/xrd/TwoTheta_scan_powder.archive.json > test1.archive.json You can also test the plots of the plugin by using --preview-plots . This is extremely useful to quickly change plots. Run and see the Plotly plots in corresponding browser tabs: uv run nomad parse packages/nomad-measurements/tests/data/xrd/TwoTheta_scan_powder.archive.json --preview-plots Please refer to plugins documentation to learn more about running parsers from CLI or within Python. Running the parse command within Python can be used to run automatized tests.","title":"Testing plugins in the terminal"},{"location":"part-2-developing-plugins.html#debugging-plugin-code","text":"Debugging is the process of running your code step by step in order to find problems and understand how it behaves at runtime. Instead of just looking at log files or error messages, a debugger lets you pause execution , inspect variables , and control the flow of your program . This is one of the most effective ways to fix issues in your plugin code and learn how NOMAD processes your changes. Running NOMAD locally with a debugger allows you to attach directly to the plugin code while it executes. You can then pause execution at specific lines (breakpoints), check variable values, and follow the program\u2019s logic in detail.","title":"Debugging Plugin Code"},{"location":"part-2-developing-plugins.html#step-1-enable-the-debugger","text":"Open the file .vscode/launch.json in your nomad-distro-dev workspace and add the following configuration: { \"name\" : \"appworker\" , \"type\" : \"python\" , \"request\" : \"launch\" , \"justMyCode\" : false , \"program\" : \"${workspaceFolder}/.venv/bin/nomad\" , \"args\" : [ \"admin\" , \"run\" , \"appworker\" ] } Save the file.","title":"Step 1: Enable the Debugger"},{"location":"part-2-developing-plugins.html#step-2-set-breakpoints","text":"Open the plugin file you want to inspect in VS Code. Click in the margin (to the left of the line number) where you want execution to pause. A red dot will appear, marking your breakpoint.","title":"Step 2: Set Breakpoints"},{"location":"part-2-developing-plugins.html#step-3-run-nomad-in-debug-mode","text":"In VS Code, open the Run and Debug panel (left sidebar). Select appworker from the dropdown menu. Press the Play button \u25b6\ufe0f. NOMAD will now start in debugging mode.","title":"Step 3: Run NOMAD in Debug Mode"},{"location":"part-2-developing-plugins.html#step-4-trigger-your-plugin-code","text":"Open the NOMAD GUI in your browser. Perform the action that uses your plugin (e.g., upload a file, run a calculation, etc.). Execution will stop at your breakpoint. At this point, you can: Inspect variable values Step through code line by line Resume execution with the control buttons","title":"Step 4: Trigger Your Plugin Code"},{"location":"part-2-developing-plugins.html#summary","text":"Breakpoints stop execution where you want to inspect code Debugger shows variable values and program flow Run/Debug mode in VS Code makes it easy to understand what your plugin is doing and fix errors more effectively","title":"\u2705 Summary"},{"location":"part-3-collaborative-dev.html","text":"Part 3: Collaborative Development with Git and GitHub \u00b6 Git and GitHub are powerful tools for collaboration. They ensure you can track changes, work in parallel, and avoid overwriting each other\u2019s modifications. In this workshop we will practice the basic routines. For a deeper understanding, check out tutorials on YouTube or other learning resources online. Branching and Pull Requests \u00b6 It is best practice to create your own branch for any modification you make. This branch serves as a safe workspace for your changes. Once you are satisfied, you can commit the changes and open a pull request (PR) to merge them back into the main branch. Branches let you work independently without breaking main Commits record your changes step by step Pull requests (PRs) allow you to merge your changes after review Branch protection rules can be set in GitHub (e.g., require review before merging into main ) You can perform all these tasks via the terminal or the GUI in VS Code. It is useful to know both approaches. GitHub Authentication \u00b6 Before we can push any code changes to GitHub, we need to make sure each participant is authenticated. This step is mandatory \u2014 otherwise git push will fail. Step 1: Check if Authentication Already Works \u00b6 In your cloned repository, run: git remote -v If the URL starts with git@github.com:... \u2192 you are set up for SSH . If it starts with https://github.com/... \u2192 you are using HTTPS . Try pushing a test change: git commit --allow-empty -m \"Test commit\" git push origin main \u2705 If it pushes without asking for credentials \u2192 authentication works. \u274c If you get an error \u2192 continue below. Step 2: Set Up Authentication (choose one) \u00b6 Option A: HTTPS with Personal Access Token (PAT) \u00b6 Go to GitHub \u2192 Settings \u2192 Developer settings \u2192 Personal access tokens \u2192 Tokens (classic) Generate new token with at least repo scope. Configure credential helper: git config --global credential.helper store Push again: git push origin main Username: your GitHub username Password: paste your token Git will remember it for future pushes. Option B: SSH Keys (recommended for long-term use) \u00b6 Generate a new SSH key: ssh-keygen -t ed25519 -C \"your_email@example.com\" Start ssh-agent and add your key: eval \" $( ssh-agent -s ) \" ssh-add ~/.ssh/id_ed25519 Copy the public key: cat ~/.ssh/id_ed25519.pub Add it to GitHub: Settings \u2192 SSH and GPG keys \u2192 New SSH key Test connection: ssh -T git@github.com Update your remote (if needed): git remote set-url origin git@github.com:USERNAME/REPO.git Step 3: Verify Setup \u00b6 Try again: git push origin main \u2705 Works \u2192 you are authenticated \u274c Still fails \u2192 ask for assistance (common issues: token scopes, firewall/SSH restrictions) Basic Workflow in the Terminal \u00b6 1. Create a new branch \u00b6 git checkout -b my-feature-branch Creates a new branch named my-feature-branch and switches to it. 2. Verify you are on the new branch \u00b6 git status Output should show: On branch my-feature-branch 3. Stage changes \u00b6 git add . Stages all modified files (use git add <file> to stage selectively). 4. Commit changes \u00b6 git commit -m \"Add my new feature or fix\" Saves a snapshot of your staged changes to the branch history. 5. Push the branch to GitHub \u00b6 git push origin my-feature-branch Uploads your branch to the remote repository on GitHub. Keeping Your Branch Up to Date \u00b6 While you work, other contributors may push changes to the main branch. To avoid conflicts, you should regularly sync your branch with main . 1. Switch to main and update it \u00b6 git checkout main git pull origin main 2. Switch back to your feature branch \u00b6 git checkout my-feature-branch 3. Merge the latest main into your branch \u00b6 git merge main If there are conflicts, Git will show them in the files. Resolve conflicts, then stage and commit again. Alternative: Rebase your branch (cleaner history) \u00b6 git checkout my-feature-branch git pull --rebase origin main After Pushing: Create a Pull Request \u00b6 Go to your repository on GitHub. GitHub will suggest creating a pull request for your new branch. Add a description of the changes and submit the PR. After review, the PR can be merged into main . In the Source Control panel of VSCode you can do the above mentioned steps: \u2705 Summary \u00b6 Always work in a separate branch Stage \u2192 commit \u2192 push your changes Open a PR to merge into main This workflow keeps the project history clean and enables smooth collaboration. Git Collaboration Cheatsheet \u00b6 A quick reference for the most common Git commands you will use during the workshop. Branching & Development \u00b6 Command Purpose git checkout -b my-feature-branch Create and switch to a new branch git status Show current branch and changed files git add . Stage all modified files git add <file> Stage a specific file git commit -m \"message\" Commit staged changes with a message git push origin my-feature-branch Push branch and commits to GitHub Syncing with main \u00b6 Command Purpose git checkout main Switch to main branch git pull origin main Update local main with latest changes from GitHub git checkout my-feature-branch Switch back to your feature branch git merge main Merge updated main into your branch git pull --rebase origin main Alternative: rebase your branch on top of main for cleaner history Pull Requests \u00b6 Step Action 1 Push your feature branch to GitHub ( git push origin my-feature-branch ) 2 Open GitHub in browser 3 Create a Pull Request (PR) into main 4 Add description and request a review 5 Merge PR once approved \u2705 Key Rules \u00b6 Never commit directly to main \u2014 always use a feature branch. Commit often with meaningful messages. Sync with main regularly to avoid conflicts. Use PRs to merge changes into main after review.","title":"Part 3"},{"location":"part-3-collaborative-dev.html#part-3-collaborative-development-with-git-and-github","text":"Git and GitHub are powerful tools for collaboration. They ensure you can track changes, work in parallel, and avoid overwriting each other\u2019s modifications. In this workshop we will practice the basic routines. For a deeper understanding, check out tutorials on YouTube or other learning resources online.","title":"Part 3: Collaborative Development with Git and GitHub"},{"location":"part-3-collaborative-dev.html#branching-and-pull-requests","text":"It is best practice to create your own branch for any modification you make. This branch serves as a safe workspace for your changes. Once you are satisfied, you can commit the changes and open a pull request (PR) to merge them back into the main branch. Branches let you work independently without breaking main Commits record your changes step by step Pull requests (PRs) allow you to merge your changes after review Branch protection rules can be set in GitHub (e.g., require review before merging into main ) You can perform all these tasks via the terminal or the GUI in VS Code. It is useful to know both approaches.","title":"Branching and Pull Requests"},{"location":"part-3-collaborative-dev.html#github-authentication","text":"Before we can push any code changes to GitHub, we need to make sure each participant is authenticated. This step is mandatory \u2014 otherwise git push will fail.","title":"GitHub Authentication"},{"location":"part-3-collaborative-dev.html#step-1-check-if-authentication-already-works","text":"In your cloned repository, run: git remote -v If the URL starts with git@github.com:... \u2192 you are set up for SSH . If it starts with https://github.com/... \u2192 you are using HTTPS . Try pushing a test change: git commit --allow-empty -m \"Test commit\" git push origin main \u2705 If it pushes without asking for credentials \u2192 authentication works. \u274c If you get an error \u2192 continue below.","title":"Step 1: Check if Authentication Already Works"},{"location":"part-3-collaborative-dev.html#step-2-set-up-authentication-choose-one","text":"","title":"Step 2: Set Up Authentication (choose one)"},{"location":"part-3-collaborative-dev.html#option-a-https-with-personal-access-token-pat","text":"Go to GitHub \u2192 Settings \u2192 Developer settings \u2192 Personal access tokens \u2192 Tokens (classic) Generate new token with at least repo scope. Configure credential helper: git config --global credential.helper store Push again: git push origin main Username: your GitHub username Password: paste your token Git will remember it for future pushes.","title":"Option A: HTTPS with Personal Access Token (PAT)"},{"location":"part-3-collaborative-dev.html#option-b-ssh-keys-recommended-for-long-term-use","text":"Generate a new SSH key: ssh-keygen -t ed25519 -C \"your_email@example.com\" Start ssh-agent and add your key: eval \" $( ssh-agent -s ) \" ssh-add ~/.ssh/id_ed25519 Copy the public key: cat ~/.ssh/id_ed25519.pub Add it to GitHub: Settings \u2192 SSH and GPG keys \u2192 New SSH key Test connection: ssh -T git@github.com Update your remote (if needed): git remote set-url origin git@github.com:USERNAME/REPO.git","title":"Option B: SSH Keys (recommended for long-term use)"},{"location":"part-3-collaborative-dev.html#step-3-verify-setup","text":"Try again: git push origin main \u2705 Works \u2192 you are authenticated \u274c Still fails \u2192 ask for assistance (common issues: token scopes, firewall/SSH restrictions)","title":"Step 3: Verify Setup"},{"location":"part-3-collaborative-dev.html#basic-workflow-in-the-terminal","text":"","title":"Basic Workflow in the Terminal"},{"location":"part-3-collaborative-dev.html#1-create-a-new-branch","text":"git checkout -b my-feature-branch Creates a new branch named my-feature-branch and switches to it.","title":"1. Create a new branch"},{"location":"part-3-collaborative-dev.html#2-verify-you-are-on-the-new-branch","text":"git status Output should show: On branch my-feature-branch","title":"2. Verify you are on the new branch"},{"location":"part-3-collaborative-dev.html#3-stage-changes","text":"git add . Stages all modified files (use git add <file> to stage selectively).","title":"3. Stage changes"},{"location":"part-3-collaborative-dev.html#4-commit-changes","text":"git commit -m \"Add my new feature or fix\" Saves a snapshot of your staged changes to the branch history.","title":"4. Commit changes"},{"location":"part-3-collaborative-dev.html#5-push-the-branch-to-github","text":"git push origin my-feature-branch Uploads your branch to the remote repository on GitHub.","title":"5. Push the branch to GitHub"},{"location":"part-3-collaborative-dev.html#keeping-your-branch-up-to-date","text":"While you work, other contributors may push changes to the main branch. To avoid conflicts, you should regularly sync your branch with main .","title":"Keeping Your Branch Up to Date"},{"location":"part-3-collaborative-dev.html#1-switch-to-main-and-update-it","text":"git checkout main git pull origin main","title":"1. Switch to main and update it"},{"location":"part-3-collaborative-dev.html#2-switch-back-to-your-feature-branch","text":"git checkout my-feature-branch","title":"2. Switch back to your feature branch"},{"location":"part-3-collaborative-dev.html#3-merge-the-latest-main-into-your-branch","text":"git merge main If there are conflicts, Git will show them in the files. Resolve conflicts, then stage and commit again.","title":"3. Merge the latest main into your branch"},{"location":"part-3-collaborative-dev.html#alternative-rebase-your-branch-cleaner-history","text":"git checkout my-feature-branch git pull --rebase origin main","title":"Alternative: Rebase your branch (cleaner history)"},{"location":"part-3-collaborative-dev.html#after-pushing-create-a-pull-request","text":"Go to your repository on GitHub. GitHub will suggest creating a pull request for your new branch. Add a description of the changes and submit the PR. After review, the PR can be merged into main . In the Source Control panel of VSCode you can do the above mentioned steps:","title":"After Pushing: Create a Pull Request"},{"location":"part-3-collaborative-dev.html#summary","text":"Always work in a separate branch Stage \u2192 commit \u2192 push your changes Open a PR to merge into main This workflow keeps the project history clean and enables smooth collaboration.","title":"\u2705 Summary"},{"location":"part-3-collaborative-dev.html#git-collaboration-cheatsheet","text":"A quick reference for the most common Git commands you will use during the workshop.","title":"Git Collaboration Cheatsheet"},{"location":"part-3-collaborative-dev.html#branching-development","text":"Command Purpose git checkout -b my-feature-branch Create and switch to a new branch git status Show current branch and changed files git add . Stage all modified files git add <file> Stage a specific file git commit -m \"message\" Commit staged changes with a message git push origin my-feature-branch Push branch and commits to GitHub","title":"Branching &amp; Development"},{"location":"part-3-collaborative-dev.html#syncing-with-main","text":"Command Purpose git checkout main Switch to main branch git pull origin main Update local main with latest changes from GitHub git checkout my-feature-branch Switch back to your feature branch git merge main Merge updated main into your branch git pull --rebase origin main Alternative: rebase your branch on top of main for cleaner history","title":"Syncing with main"},{"location":"part-3-collaborative-dev.html#pull-requests","text":"Step Action 1 Push your feature branch to GitHub ( git push origin my-feature-branch ) 2 Open GitHub in browser 3 Create a Pull Request (PR) into main 4 Add description and request a review 5 Merge PR once approved","title":"Pull Requests"},{"location":"part-3-collaborative-dev.html#key-rules","text":"Never commit directly to main \u2014 always use a feature branch. Commit often with meaningful messages. Sync with main regularly to avoid conflicts. Use PRs to merge changes into main after review.","title":"\u2705 Key Rules"},{"location":"part-4-oasis-image.html","text":"Part 4: Writing and Publishing a NOMAD Oasis Image (with Plugins) \u00b6 This section explains how to create your own NOMAD Oasis distribution from the official template and how to trigger image builds by adding plugins to pyproject.toml . The result is a container image published to GitHub Container Registry (GHCR) that you can deploy on a server or run locally. Concept Overview \u00b6 The repository FAIRmat-NFDI/nomad-distro-template is a template for building custom NOMAD Oasis images. When you create a new repo from this template, GitHub Actions will automatically build and publish: an app image (Oasis), and a jupyter image (for NORTH / JupyterHub). You customize the image by listing your plugins under [project.optional-dependencies].plugins in pyproject.toml . Every push to main triggers the CI workflow that builds and publishes new images to GHCR . Visibility & Authentication Notes Depending on your org/repo settings, the produced image may be private (requires a Personal Access Token , PAT, to pull) or public (recommended for easy deployment). To keep the image private, configure a PAT with the scopes required for GHCR. To make it public, ensure your organization allows public packages and change the package visibility after the first successful build. Discoverability Tip Consider adding the repo topic nomad-distribution (Repo \u2192 About \u2192 \u2699\ufe0f \u2192 Topics ) so others can find your distribution. Step-by-Step: Create Your Distribution Repository \u00b6 Generate a new repo from the template Open: https://github.com/FAIRmat-NFDI/nomad-distro-template Click Use this template (top-right), or use the \u201cNew from template\u201d link: https://github.com/new?template_name=nomad-distro-template&template_owner=FAIRmat-NFDI Choose a name (e.g., my-nomad-oasis ) and create the repo. Wait for the template initialization workflow On first creation, a GitHub Action (Template Repository Initialization) runs automatically. If the \u201cinitialization warning\u201d in the README does not disappear after a few minutes: Go to Actions \u2192 select Template Repository Initialization \u2192 Run workflow to trigger it manually. Once finished, refresh the page (the warning disappears). Clone your new repository or run it directly in GitHub Codespaces git clone https://github.com/<YOUR_ORG_OR_USER>/<YOUR_REPO>.git cd <YOUR_REPO> GitHub Codespaces: (Optional) Make your package public After your first successful build, open your repo\u2019s Packages section and change visibility to Public if desired. Repository Layout (What You\u2019ll Touch Most) \u00b6 pyproject.toml \u2192 declare which plugins to include in the built image. .github/workflows/docker-publish.yml \u2192 CI that builds and pushes images. docker-compose.yaml and configs/ \u2192 example deployment config (local/server). You add plugins to pyproject.toml . After you merge to main , CI builds and publishes fresh images. Add a Plugin to pyproject.toml \u00b6 Open pyproject.toml and add your plugin(s) under the plugins extra: A) Plugin from PyPI \u00b6 [project.optional-dependencies] plugins = [ \"nomad-material-processing>=1.0.0\" , ] B) Plugin from Git (pinned to a commit) \u00b6 [project.optional-dependencies] plugins = [ \"nomad-measurements @ git+https://github.com/FAIRmat-NFDI/nomad-measurements.git@71b7e8c9bb376ce9e8610aba9a20be0b5bce6775\" , ] C) Plugin from Git (pinned to a tag) \u00b6 [project.optional-dependencies] plugins = [ \"nomad-measurements @ git+https://github.com/FAIRmat-NFDI/nomad-measurements.git@v0.0.4\" , ] D) Plugin in a subdirectory of a repo \u00b6 [project.optional-dependencies] plugins = [ \"ikz_pld_plugin @ git+https://github.com/FAIRmat-NFDI/AreaA-data_modeling_and_schemas.git@30fc90843428d1b36a1d222874803abae8b1cb42#subdirectory=PVD/PLD/jeremy_ikz/ikz_pld_plugin\" , ] Tips Prefer tags or commits for reproducible builds. You can list multiple plugins in the same array. Keep versions pinned (tags/ranges) to avoid surprises. In our case, let's add the pdi-nomad-plugin to the Oasis image and remove all other plugins. Add the following line to [project.optional-dependencies] and remove the existing plugins: Commit, Push, and Trigger the Image Build \u00b6 Create a feature branch, edit, commit git checkout -b add-my-plugin # edit pyproject.toml as above git add pyproject.toml git commit -m \"Add plugin(s) to distribution image\" Push the branch and open a Pull Request git push origin add-my-plugin On GitHub, open a PR into main . Request review if branch protection rules are in place. Merge to main to trigger CI Merging the PR starts the docker-publish workflow. Watch progress under Actions \u2192 docker-publish . Where to Find the Built Images \u00b6 After a successful run, images are pushed to GHCR : App: ghcr.io/<OWNER>/<REPO>:main Jupyter: ghcr.io/<OWNER>/<REPO>/jupyter:main Pulling private images requires authentication with a PAT. GHCR Login (if your package is private) \u00b6 Create a Personal Access Token (classic) with scopes: read:packages (pull) write:packages (push; not needed for deploy-only machines) Login: echo \"<YOUR_PAT>\" | docker login ghcr.io -u <YOUR_GITHUB_USERNAME> --password-stdin Quick Local Test: Pull & Run \u00b6 From the distribution repo folder: docker compose pull docker compose up -d Health check: # HTTP curl localhost/nomad-oasis/alive # HTTPS (use --insecure only for self-signed certs) curl --insecure https://localhost/nomad-oasis/alive Open the UI: http://localhost/nomad-oasis Linux-only note: You may need to fix volume ownership once: sudo chown -R 1000 .volumes Updating the Image After More Plugin Changes \u00b6 When you add or update plugins in pyproject.toml and merge to main , CI will build fresh images. To update your local deployment: docker compose down docker compose pull docker compose up -d Free disk space if needed: docker image prune -a Notes on the Jupyter (NORTH) Image \u00b6 CI also builds a Jupyter image : ghcr.io/<OWNER>/<REPO>/jupyter:main Pre-pull to avoid startup timeouts: docker pull ghcr.io/<OWNER>/<REPO>/jupyter:main Add global Jupyter packages by listing them under the jupyter extra in pyproject.toml : [project.optional-dependencies] jupyter = [ \"voila\" , \"ipyaggrid\" , \"ipysheet\" , \"ipydatagrid\" , \"jupyter-flex\" , ] Updating the PDI NOMAD Oasis Image \u00b6 The NOMAD Oasis image which runs on the PDI server is managed here: https://github.com/PDI-Berlin/PDI-NOMAD-Oasis-image You should organize yourself regarding responsibility (who maintains the repo and images) and accessibility (who has permissions to update, push changes, and trigger new builds). Suggested Practices \u00b6 Team access Ensure that at least 2\u20133 team members have Admin or Maintainer rights on the repository to avoid single points of failure. Use a GitHub Team (inside the PDI organization) to manage access rather than assigning rights individually. Branch protection Protect the main branch. Require pull requests and at least one reviewer before merging. This avoids accidental pushes that would immediately trigger a new image build. Versioning Tag releases (e.g., v0.1.0 , v0.2.0 ) before merging into main . Tags can be used for stable deployments and make it easy to roll back to a known working version. Consider using GitHub Releases to document what changed in each update. Documentation Keep the README updated with clear instructions on how to: Add plugins ( pyproject.toml ) Trigger builds (merge to main ) Pull and deploy images on the server CI Monitoring Regularly check the GitHub Actions build logs after merging changes. If builds fail, fixes should be prioritized because the Oasis server cannot update otherwise. Security If the image is private, ensure that the required PAT or credentials for pulling are stored securely on the server (e.g., in a Docker login config file). Rotate tokens if people leave the team. Update procedure When updating the image on the server, follow the safe sequence: docker compose down docker compose pull docker compose up -d Always test after updating: curl localhost/nomad-oasis/alive Useful Docker Commands \u00b6 When working with NOMAD Oasis images, it\u2019s helpful to know a few basic Docker commands for monitoring and troubleshooting: List running containers docker ps Shows all currently running containers with their names, IDs, ports, and status. Check logs of a container docker logs <container_name> Displays the output of a running container. Use this to check for errors or debug startup issues. Add -f to follow logs in real time: docker logs -f <container_name> List all containers (including stopped) docker ps -a Stop / start / restart a container docker stop <container_name> docker start <container_name> docker restart <container_name> Remove unused images and containers docker system prune Cleans up stopped containers, dangling images, and unused networks. Add -a to remove all unused images (be careful, it frees space but requires re-pulling images later). Check disk usage docker system df Summarizes how much disk space images, containers, and volumes are using. Open a shell inside a container docker exec -it <container_name> /bin/bash Gives you direct access to the container\u2019s shell, useful for advanced debugging. Tip: Most NOMAD Oasis setups use docker compose , which manages multiple containers at once. - To check logs of all services together: docker compose logs -f - To restart everything: docker compose down docker compose up -d Docker Command Cheat Sheet \u00b6 Command Purpose docker ps List running containers docker ps -a List all containers (including stopped ones) docker logs <container_name> Show logs of a container docker logs -f <container_name> Follow container logs in real time docker stop <container_name> Stop a running container docker start <container_name> Start a stopped container docker restart <container_name> Restart a container docker exec -it <container_name> /bin/bash Open an interactive shell inside a container docker system df Show Docker disk usage (images, containers, volumes) docker system prune Remove unused containers, networks, and dangling images docker system prune -a Remove all unused images (frees more space, but requires re-pull) docker compose logs -f Show and follow logs of all services managed by Docker Compose docker compose down Stop and remove all containers defined in docker-compose.yml docker compose up -d Start all containers in detached mode Tip: Use docker ps to find the correct <container_name> before running log or exec commands. \u2705 Summary \u00b6 Define who is responsible for maintaining the repo and images. Use branch protection, tags, and reviews to keep updates reliable. Keep the server update procedure documented and repeatable. Ensure multiple team members have access to avoid bottlenecks. Using Tags to Version the PDI NOMAD Oasis Image \u00b6 Tags in Git and GitHub allow you to mark a specific commit with a version label (e.g. v0.1.0 ). This is useful for NOMAD Oasis because each tag corresponds to a reproducible Docker image. You can always deploy, roll back, or reference a tagged version. Why Use Tags? \u00b6 Reproducibility \u2192 the exact state of the code at the moment of tagging can always be retrieved. Stability \u2192 the server can run a known-good version instead of always tracking the moving main branch. Traceability \u2192 tags (together with GitHub Releases) provide a history of what changed. Step-by-Step: Creating and Using Tags \u00b6 1. Make sure your branch is up to date \u00b6 git checkout main git pull origin main 2. Create a new tag \u00b6 git tag v0.1.0 Replace v0.1.0 with your desired version. Tag names usually start with v (semantic versioning: vMAJOR.MINOR.PATCH ). 3. Push the tag to GitHub \u00b6 git push origin v0.1.0 This makes the tag visible in GitHub and triggers the docker-publish workflow . The CI builds new images and publishes them with the tag. Resulting Docker Images \u00b6 If your repo is PDI-Berlin/PDI-NOMAD-Oasis-image , then: App image: ghcr.io/pdi-berlin/pdi-nomad-oasis-image:v0.1.0 Jupyter image: ghcr.io/pdi-berlin/pdi-nomad-oasis-image/jupyter:v0.1.0 (Instead of :main , you now have versioned tags like :v0.1.0 .) 4. Deploy a Tagged Image on the Server \u00b6 In your docker-compose.yaml , update the image: entries from :main to your tag, for example: services : app : image : ghcr.io/pdi-berlin/pdi-nomad-oasis-image:v0.1.0 jupyter : image : ghcr.io/pdi-berlin/pdi-nomad-oasis-image/jupyter:v0.1.0 Then update the deployment: docker compose down docker compose pull docker compose up -d 5. (Optional) Create a GitHub Release \u00b6 To add documentation to your tag: Go to your GitHub repo \u2192 Releases \u2192 Draft a new release Select your tag ( v0.1.0 ) Write release notes (what changed, new plugins, fixes) Publish the release This makes it easier for others to know what each tag contains. \u2705 Best Practices \u00b6 Use semantic versioning ( vMAJOR.MINOR.PATCH ) MAJOR \u2192 incompatible changes MINOR \u2192 new features/plugins (backwards-compatible) PATCH \u2192 bug fixes Always tag before deploying to production . Keep the server pinned to a tag , not main . Document what each tag means in Releases . With this workflow, PDI can safely upgrade Oasis images and roll back to the previous version if something breaks. Troubleshooting \u00b6 Template init message persists Actions \u2192 run Template Repository Initialization manually. Can\u2019t pull image / image not visible Ensure the workflow succeeded; check package visibility (public/private). If private, docker login ghcr.io with a PAT. Plugin installation fails in CI Validate pyproject.toml syntax; pin to valid tags/commits; ensure plugin repo is reachable/public (or CI has access). HTTPS / TLS For production, switch to HTTPS by providing a valid certificate and updating docker-compose.yml to use the HTTPS nginx config. For local testing you can use self-signed certs (browsers won\u2019t trust them). Quick Reference: Add Plugin \u2192 Build \u2192 Use \u00b6 Edit pyproject.toml Add plugin lines under [project.optional-dependencies].plugins . Commit & push via a branch \u2192 PR \u2192 merge to main git checkout -b add-my-plugin git add pyproject.toml git commit -m \"Add plugin(s)\" git push origin add-my-plugin # open PR on GitHub and merge CI builds images to GHCR App: ghcr.io/<OWNER>/<REPO>:main Jupyter: ghcr.io/<OWNER>/<REPO>/jupyter:main Pull & run docker compose pull docker compose up -d","title":"Part 4"},{"location":"part-4-oasis-image.html#part-4-writing-and-publishing-a-nomad-oasis-image-with-plugins","text":"This section explains how to create your own NOMAD Oasis distribution from the official template and how to trigger image builds by adding plugins to pyproject.toml . The result is a container image published to GitHub Container Registry (GHCR) that you can deploy on a server or run locally.","title":"Part 4: Writing and Publishing a NOMAD Oasis Image (with Plugins)"},{"location":"part-4-oasis-image.html#concept-overview","text":"The repository FAIRmat-NFDI/nomad-distro-template is a template for building custom NOMAD Oasis images. When you create a new repo from this template, GitHub Actions will automatically build and publish: an app image (Oasis), and a jupyter image (for NORTH / JupyterHub). You customize the image by listing your plugins under [project.optional-dependencies].plugins in pyproject.toml . Every push to main triggers the CI workflow that builds and publishes new images to GHCR . Visibility & Authentication Notes Depending on your org/repo settings, the produced image may be private (requires a Personal Access Token , PAT, to pull) or public (recommended for easy deployment). To keep the image private, configure a PAT with the scopes required for GHCR. To make it public, ensure your organization allows public packages and change the package visibility after the first successful build. Discoverability Tip Consider adding the repo topic nomad-distribution (Repo \u2192 About \u2192 \u2699\ufe0f \u2192 Topics ) so others can find your distribution.","title":"Concept Overview"},{"location":"part-4-oasis-image.html#step-by-step-create-your-distribution-repository","text":"Generate a new repo from the template Open: https://github.com/FAIRmat-NFDI/nomad-distro-template Click Use this template (top-right), or use the \u201cNew from template\u201d link: https://github.com/new?template_name=nomad-distro-template&template_owner=FAIRmat-NFDI Choose a name (e.g., my-nomad-oasis ) and create the repo. Wait for the template initialization workflow On first creation, a GitHub Action (Template Repository Initialization) runs automatically. If the \u201cinitialization warning\u201d in the README does not disappear after a few minutes: Go to Actions \u2192 select Template Repository Initialization \u2192 Run workflow to trigger it manually. Once finished, refresh the page (the warning disappears). Clone your new repository or run it directly in GitHub Codespaces git clone https://github.com/<YOUR_ORG_OR_USER>/<YOUR_REPO>.git cd <YOUR_REPO> GitHub Codespaces: (Optional) Make your package public After your first successful build, open your repo\u2019s Packages section and change visibility to Public if desired.","title":"Step-by-Step: Create Your Distribution Repository"},{"location":"part-4-oasis-image.html#repository-layout-what-youll-touch-most","text":"pyproject.toml \u2192 declare which plugins to include in the built image. .github/workflows/docker-publish.yml \u2192 CI that builds and pushes images. docker-compose.yaml and configs/ \u2192 example deployment config (local/server). You add plugins to pyproject.toml . After you merge to main , CI builds and publishes fresh images.","title":"Repository Layout (What You\u2019ll Touch Most)"},{"location":"part-4-oasis-image.html#add-a-plugin-to-pyprojecttoml","text":"Open pyproject.toml and add your plugin(s) under the plugins extra:","title":"Add a Plugin to pyproject.toml"},{"location":"part-4-oasis-image.html#a-plugin-from-pypi","text":"[project.optional-dependencies] plugins = [ \"nomad-material-processing>=1.0.0\" , ]","title":"A) Plugin from PyPI"},{"location":"part-4-oasis-image.html#b-plugin-from-git-pinned-to-a-commit","text":"[project.optional-dependencies] plugins = [ \"nomad-measurements @ git+https://github.com/FAIRmat-NFDI/nomad-measurements.git@71b7e8c9bb376ce9e8610aba9a20be0b5bce6775\" , ]","title":"B) Plugin from Git (pinned to a commit)"},{"location":"part-4-oasis-image.html#c-plugin-from-git-pinned-to-a-tag","text":"[project.optional-dependencies] plugins = [ \"nomad-measurements @ git+https://github.com/FAIRmat-NFDI/nomad-measurements.git@v0.0.4\" , ]","title":"C) Plugin from Git (pinned to a tag)"},{"location":"part-4-oasis-image.html#d-plugin-in-a-subdirectory-of-a-repo","text":"[project.optional-dependencies] plugins = [ \"ikz_pld_plugin @ git+https://github.com/FAIRmat-NFDI/AreaA-data_modeling_and_schemas.git@30fc90843428d1b36a1d222874803abae8b1cb42#subdirectory=PVD/PLD/jeremy_ikz/ikz_pld_plugin\" , ] Tips Prefer tags or commits for reproducible builds. You can list multiple plugins in the same array. Keep versions pinned (tags/ranges) to avoid surprises. In our case, let's add the pdi-nomad-plugin to the Oasis image and remove all other plugins. Add the following line to [project.optional-dependencies] and remove the existing plugins:","title":"D) Plugin in a subdirectory of a repo"},{"location":"part-4-oasis-image.html#commit-push-and-trigger-the-image-build","text":"Create a feature branch, edit, commit git checkout -b add-my-plugin # edit pyproject.toml as above git add pyproject.toml git commit -m \"Add plugin(s) to distribution image\" Push the branch and open a Pull Request git push origin add-my-plugin On GitHub, open a PR into main . Request review if branch protection rules are in place. Merge to main to trigger CI Merging the PR starts the docker-publish workflow. Watch progress under Actions \u2192 docker-publish .","title":"Commit, Push, and Trigger the Image Build"},{"location":"part-4-oasis-image.html#where-to-find-the-built-images","text":"After a successful run, images are pushed to GHCR : App: ghcr.io/<OWNER>/<REPO>:main Jupyter: ghcr.io/<OWNER>/<REPO>/jupyter:main Pulling private images requires authentication with a PAT.","title":"Where to Find the Built Images"},{"location":"part-4-oasis-image.html#ghcr-login-if-your-package-is-private","text":"Create a Personal Access Token (classic) with scopes: read:packages (pull) write:packages (push; not needed for deploy-only machines) Login: echo \"<YOUR_PAT>\" | docker login ghcr.io -u <YOUR_GITHUB_USERNAME> --password-stdin","title":"GHCR Login (if your package is private)"},{"location":"part-4-oasis-image.html#quick-local-test-pull-run","text":"From the distribution repo folder: docker compose pull docker compose up -d Health check: # HTTP curl localhost/nomad-oasis/alive # HTTPS (use --insecure only for self-signed certs) curl --insecure https://localhost/nomad-oasis/alive Open the UI: http://localhost/nomad-oasis Linux-only note: You may need to fix volume ownership once: sudo chown -R 1000 .volumes","title":"Quick Local Test: Pull &amp; Run"},{"location":"part-4-oasis-image.html#updating-the-image-after-more-plugin-changes","text":"When you add or update plugins in pyproject.toml and merge to main , CI will build fresh images. To update your local deployment: docker compose down docker compose pull docker compose up -d Free disk space if needed: docker image prune -a","title":"Updating the Image After More Plugin Changes"},{"location":"part-4-oasis-image.html#notes-on-the-jupyter-north-image","text":"CI also builds a Jupyter image : ghcr.io/<OWNER>/<REPO>/jupyter:main Pre-pull to avoid startup timeouts: docker pull ghcr.io/<OWNER>/<REPO>/jupyter:main Add global Jupyter packages by listing them under the jupyter extra in pyproject.toml : [project.optional-dependencies] jupyter = [ \"voila\" , \"ipyaggrid\" , \"ipysheet\" , \"ipydatagrid\" , \"jupyter-flex\" , ]","title":"Notes on the Jupyter (NORTH) Image"},{"location":"part-4-oasis-image.html#updating-the-pdi-nomad-oasis-image","text":"The NOMAD Oasis image which runs on the PDI server is managed here: https://github.com/PDI-Berlin/PDI-NOMAD-Oasis-image You should organize yourself regarding responsibility (who maintains the repo and images) and accessibility (who has permissions to update, push changes, and trigger new builds).","title":"Updating the PDI NOMAD Oasis Image"},{"location":"part-4-oasis-image.html#suggested-practices","text":"Team access Ensure that at least 2\u20133 team members have Admin or Maintainer rights on the repository to avoid single points of failure. Use a GitHub Team (inside the PDI organization) to manage access rather than assigning rights individually. Branch protection Protect the main branch. Require pull requests and at least one reviewer before merging. This avoids accidental pushes that would immediately trigger a new image build. Versioning Tag releases (e.g., v0.1.0 , v0.2.0 ) before merging into main . Tags can be used for stable deployments and make it easy to roll back to a known working version. Consider using GitHub Releases to document what changed in each update. Documentation Keep the README updated with clear instructions on how to: Add plugins ( pyproject.toml ) Trigger builds (merge to main ) Pull and deploy images on the server CI Monitoring Regularly check the GitHub Actions build logs after merging changes. If builds fail, fixes should be prioritized because the Oasis server cannot update otherwise. Security If the image is private, ensure that the required PAT or credentials for pulling are stored securely on the server (e.g., in a Docker login config file). Rotate tokens if people leave the team. Update procedure When updating the image on the server, follow the safe sequence: docker compose down docker compose pull docker compose up -d Always test after updating: curl localhost/nomad-oasis/alive","title":"Suggested Practices"},{"location":"part-4-oasis-image.html#useful-docker-commands","text":"When working with NOMAD Oasis images, it\u2019s helpful to know a few basic Docker commands for monitoring and troubleshooting: List running containers docker ps Shows all currently running containers with their names, IDs, ports, and status. Check logs of a container docker logs <container_name> Displays the output of a running container. Use this to check for errors or debug startup issues. Add -f to follow logs in real time: docker logs -f <container_name> List all containers (including stopped) docker ps -a Stop / start / restart a container docker stop <container_name> docker start <container_name> docker restart <container_name> Remove unused images and containers docker system prune Cleans up stopped containers, dangling images, and unused networks. Add -a to remove all unused images (be careful, it frees space but requires re-pulling images later). Check disk usage docker system df Summarizes how much disk space images, containers, and volumes are using. Open a shell inside a container docker exec -it <container_name> /bin/bash Gives you direct access to the container\u2019s shell, useful for advanced debugging. Tip: Most NOMAD Oasis setups use docker compose , which manages multiple containers at once. - To check logs of all services together: docker compose logs -f - To restart everything: docker compose down docker compose up -d","title":"Useful Docker Commands"},{"location":"part-4-oasis-image.html#docker-command-cheat-sheet","text":"Command Purpose docker ps List running containers docker ps -a List all containers (including stopped ones) docker logs <container_name> Show logs of a container docker logs -f <container_name> Follow container logs in real time docker stop <container_name> Stop a running container docker start <container_name> Start a stopped container docker restart <container_name> Restart a container docker exec -it <container_name> /bin/bash Open an interactive shell inside a container docker system df Show Docker disk usage (images, containers, volumes) docker system prune Remove unused containers, networks, and dangling images docker system prune -a Remove all unused images (frees more space, but requires re-pull) docker compose logs -f Show and follow logs of all services managed by Docker Compose docker compose down Stop and remove all containers defined in docker-compose.yml docker compose up -d Start all containers in detached mode Tip: Use docker ps to find the correct <container_name> before running log or exec commands.","title":"Docker Command Cheat Sheet"},{"location":"part-4-oasis-image.html#summary","text":"Define who is responsible for maintaining the repo and images. Use branch protection, tags, and reviews to keep updates reliable. Keep the server update procedure documented and repeatable. Ensure multiple team members have access to avoid bottlenecks.","title":"\u2705 Summary"},{"location":"part-4-oasis-image.html#using-tags-to-version-the-pdi-nomad-oasis-image","text":"Tags in Git and GitHub allow you to mark a specific commit with a version label (e.g. v0.1.0 ). This is useful for NOMAD Oasis because each tag corresponds to a reproducible Docker image. You can always deploy, roll back, or reference a tagged version.","title":"Using Tags to Version the PDI NOMAD Oasis Image"},{"location":"part-4-oasis-image.html#why-use-tags","text":"Reproducibility \u2192 the exact state of the code at the moment of tagging can always be retrieved. Stability \u2192 the server can run a known-good version instead of always tracking the moving main branch. Traceability \u2192 tags (together with GitHub Releases) provide a history of what changed.","title":"Why Use Tags?"},{"location":"part-4-oasis-image.html#step-by-step-creating-and-using-tags","text":"","title":"Step-by-Step: Creating and Using Tags"},{"location":"part-4-oasis-image.html#1-make-sure-your-branch-is-up-to-date","text":"git checkout main git pull origin main","title":"1. Make sure your branch is up to date"},{"location":"part-4-oasis-image.html#2-create-a-new-tag","text":"git tag v0.1.0 Replace v0.1.0 with your desired version. Tag names usually start with v (semantic versioning: vMAJOR.MINOR.PATCH ).","title":"2. Create a new tag"},{"location":"part-4-oasis-image.html#3-push-the-tag-to-github","text":"git push origin v0.1.0 This makes the tag visible in GitHub and triggers the docker-publish workflow . The CI builds new images and publishes them with the tag.","title":"3. Push the tag to GitHub"},{"location":"part-4-oasis-image.html#resulting-docker-images","text":"If your repo is PDI-Berlin/PDI-NOMAD-Oasis-image , then: App image: ghcr.io/pdi-berlin/pdi-nomad-oasis-image:v0.1.0 Jupyter image: ghcr.io/pdi-berlin/pdi-nomad-oasis-image/jupyter:v0.1.0 (Instead of :main , you now have versioned tags like :v0.1.0 .)","title":"Resulting Docker Images"},{"location":"part-4-oasis-image.html#4-deploy-a-tagged-image-on-the-server","text":"In your docker-compose.yaml , update the image: entries from :main to your tag, for example: services : app : image : ghcr.io/pdi-berlin/pdi-nomad-oasis-image:v0.1.0 jupyter : image : ghcr.io/pdi-berlin/pdi-nomad-oasis-image/jupyter:v0.1.0 Then update the deployment: docker compose down docker compose pull docker compose up -d","title":"4. Deploy a Tagged Image on the Server"},{"location":"part-4-oasis-image.html#5-optional-create-a-github-release","text":"To add documentation to your tag: Go to your GitHub repo \u2192 Releases \u2192 Draft a new release Select your tag ( v0.1.0 ) Write release notes (what changed, new plugins, fixes) Publish the release This makes it easier for others to know what each tag contains.","title":"5. (Optional) Create a GitHub Release"},{"location":"part-4-oasis-image.html#best-practices","text":"Use semantic versioning ( vMAJOR.MINOR.PATCH ) MAJOR \u2192 incompatible changes MINOR \u2192 new features/plugins (backwards-compatible) PATCH \u2192 bug fixes Always tag before deploying to production . Keep the server pinned to a tag , not main . Document what each tag means in Releases . With this workflow, PDI can safely upgrade Oasis images and roll back to the previous version if something breaks.","title":"\u2705 Best Practices"},{"location":"part-4-oasis-image.html#troubleshooting","text":"Template init message persists Actions \u2192 run Template Repository Initialization manually. Can\u2019t pull image / image not visible Ensure the workflow succeeded; check package visibility (public/private). If private, docker login ghcr.io with a PAT. Plugin installation fails in CI Validate pyproject.toml syntax; pin to valid tags/commits; ensure plugin repo is reachable/public (or CI has access). HTTPS / TLS For production, switch to HTTPS by providing a valid certificate and updating docker-compose.yml to use the HTTPS nginx config. For local testing you can use self-signed certs (browsers won\u2019t trust them).","title":"Troubleshooting"},{"location":"part-4-oasis-image.html#quick-reference-add-plugin-build-use","text":"Edit pyproject.toml Add plugin lines under [project.optional-dependencies].plugins . Commit & push via a branch \u2192 PR \u2192 merge to main git checkout -b add-my-plugin git add pyproject.toml git commit -m \"Add plugin(s)\" git push origin add-my-plugin # open PR on GitHub and merge CI builds images to GHCR App: ghcr.io/<OWNER>/<REPO>:main Jupyter: ghcr.io/<OWNER>/<REPO>/jupyter:main Pull & run docker compose pull docker compose up -d","title":"Quick Reference: Add Plugin \u2192 Build \u2192 Use"},{"location":"wrap-up.html","text":"Wrap-Up & Q&A \u00b6 Recap \u00b6 We set up a local NOMAD development environment. Installed and activated plugins. Modified plugin code and tested changes. Learned how to build and update custom NOMAD Oasis images. Practiced collaboration with Git and GitHub. Resources \u00b6 NOMAD Documentation : https://nomad-lab.eu/prod/v1/staging/docs/ GitHub (NOMAD repos) : nomad-distro-dev nomad-distro-template nomad-plugin-template Discord Community : NOMAD Discord YouTube Tutorials : NOMAD YouTube Channel FAIRmat Events : https://www.fairmat-nfdi.eu/events Q&A \u00b6 Open floor for participant questions and discussion. Professional Support \u00b6 If you need further assistance beyond today\u2019s workshop, our professional services are always available : Custom plugin development NOMAD Oasis hosting and deployment Strategy consulting and training \ud83d\udccc More info: www.glaidedata.com \ud83d\udce7 Contact us: info@glaidedata.com \ud83d\udd17 Follow us on LinkedIn: Glaide Data on LinkedIn","title":"Wrap-Up & Q&A"},{"location":"wrap-up.html#wrap-up-qa","text":"","title":"Wrap-Up &amp; Q&amp;A"},{"location":"wrap-up.html#recap","text":"We set up a local NOMAD development environment. Installed and activated plugins. Modified plugin code and tested changes. Learned how to build and update custom NOMAD Oasis images. Practiced collaboration with Git and GitHub.","title":"Recap"},{"location":"wrap-up.html#resources","text":"NOMAD Documentation : https://nomad-lab.eu/prod/v1/staging/docs/ GitHub (NOMAD repos) : nomad-distro-dev nomad-distro-template nomad-plugin-template Discord Community : NOMAD Discord YouTube Tutorials : NOMAD YouTube Channel FAIRmat Events : https://www.fairmat-nfdi.eu/events","title":"Resources"},{"location":"wrap-up.html#qa","text":"Open floor for participant questions and discussion.","title":"Q&amp;A"},{"location":"wrap-up.html#professional-support","text":"If you need further assistance beyond today\u2019s workshop, our professional services are always available : Custom plugin development NOMAD Oasis hosting and deployment Strategy consulting and training \ud83d\udccc More info: www.glaidedata.com \ud83d\udce7 Contact us: info@glaidedata.com \ud83d\udd17 Follow us on LinkedIn: Glaide Data on LinkedIn","title":"Professional Support"}]}